import asyncio
import json
import logging
import os
import random
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    BotCommand,
    BotCommandScopeDefault,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)


ENV = os.getenv("ENV", "dev").lower()
FEEDBACK_RECEIVER_ID = 299416948
bot_token = os.getenv("BOT_TOKEN_PROD") if ENV == "prod" else os.getenv("BOT_TOKEN_DEV")
if not bot_token:
    raise RuntimeError(f"‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ENV={ENV}")


LOG_LEVEL = os.getenv("LOG_LEVEL", "DEBUG").upper()
logging.basicConfig(level=LOG_LEVEL)


QUIZ_PATH = Path(__file__).parent / "data" / "quizzes.json"
QUIZZES: dict[str, list[dict]]
with QUIZ_PATH.open(encoding="utf-8") as f:
    QUIZZES = json.load(f)


bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()


async def on_startup(bot: Bot) -> None:
    await bot.set_my_commands(
        [BotCommand(command="start", description="ü¶Ñ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æü¶Ñ")],
        scope=BotCommandScopeDefault(),
    )
    logging.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


dp.startup.register(on_startup)


class QuizState(StatesGroup):
    waiting_for_answer = State()


@dp.message(Command("start"))
async def cmd_start(msg: Message) -> None:
    topics = list(QUIZZES.keys())
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=topic, callback_data=f"topic:{topic}")]
            for topic in topics
        ] + [[InlineKeyboardButton(text="‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫", callback_data="feedback")]]
    )
    await msg.answer("*–ü—Ä–∏–≤–µ—Ç!*\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", reply_markup=kb)


@dp.callback_query(lambda cb: cb.data.startswith("topic:"))
async def choose_topic(cb: CallbackQuery, state: FSMContext) -> None:
    topic = cb.data.split(":", 1)[1]
    await state.update_data(topic=topic, idx=0, score=0, results=[])
    await ask_question(cb.message, state)


@dp.message(lambda m: m.photo)
async def echo_file_id(msg: Message):
    await msg.answer(msg.photo[-1].file_id)


async def ask_question(msg: Message, state: FSMContext) -> None:
    data = await state.get_data()
    topic = data["topic"]
    idx = data["idx"]

    if idx >= len(QUIZZES[topic]):
        await msg.answer("‚ùó –ù–µ—Ç –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞–∂–º–∏ /start.")
        await state.clear()
        return

    q = QUIZZES[topic][idx]
    order = random.sample(range(len(q["options"])), len(q["options"]))
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=q["options"][i], callback_data=f"ans:{idx}:{i}")]
            for i in order
        ]
    )

    caption = (
        f"‚ùì_–í–æ–ø—Ä–æ—Å {idx + 1} –∏–∑ {len(QUIZZES[topic])}_\n\n"
        f"*{q['question'].splitlines()[0]}*\n"
        + "\n".join(q["question"].splitlines()[1:])
    )
    try:
        if q.get("file_id"):
            await msg.answer_photo(q["file_id"], caption=caption, reply_markup=kb)
        else:
            await msg.answer(caption, reply_markup=kb)
    except TelegramBadRequest as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await msg.answer(caption[:400], reply_markup=kb)

    await state.set_state(QuizState.waiting_for_answer)


@dp.callback_query(QuizState.waiting_for_answer)
async def handle_answer(cb: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    topic = data["topic"]

    try:
        _, qidx_str, opt_str = cb.data.split(":")
        qidx = int(qidx_str)
        opt = int(opt_str)
    except Exception as e:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback: {cb.data} ‚Äî {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        return
    if qidx != data["idx"]:
        return

    q = QUIZZES[topic][qidx]
    correct = q["correct"]
    ok = opt == correct

    data["results"].append({"idx": qidx, "correct": ok})
    data["score"] += int(ok)
    data["idx"] += 1
    await state.update_data(**data)

    await cb.answer("‚úÖ –í–µ—Ä–Ω–æ!" if ok else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ", show_alert=False)

    if data["idx"] < len(QUIZZES[topic]):
        await ask_question(cb.message, state)
        return

    lines = []
    for i, item in enumerate(data["results"], start=1):
        q_obj = QUIZZES[topic][item["idx"]]
        mark = "‚úÖ" if item["correct"] else "‚ùå"
        right = q_obj["options"][q_obj["correct"]]
        lines.append(
            f"{mark} *–í–æ–ø—Ä–æ—Å {i}:* {q_obj['question']}\n"
            f"‚ÄÉ*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* _{right}_"
        )

    await cb.message.answer(
        f"üèÅ –ö–æ–Ω–µ—Ü!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: *{data['score']}* –∏–∑ *{len(data['results'])}*\n\n"
        + "\n\n".join(lines)
    )
    await state.clear()

    topics = list(QUIZZES.keys())
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=t, callback_data=f"topic:{t}")] for t in topics
        ]
    )
    await cb.message.answer("üîÑ –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)


@dp.callback_query()
async def unknown_callback(cb: CallbackQuery):
    await cb.answer(
        "‚ö†Ô∏è –û—Ç–≤–µ—Ç —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏ /start", show_alert=True
    )

@dp.callback_query(lambda cb: cb.data == "feedback")
async def handle_feedback_request(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("üìù –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π —Ñ–∏–¥–±–µ–∫:")
    await state.set_state(QuizState.waiting_for_feedback)
    await cb.answer()

@dp.message(QuizState.waiting_for_feedback)
async def receive_feedback(msg: Message, state: FSMContext):
    try:
        text = (
            f"üì¨ *–§–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
            f"üë§ @{msg.from_user.username or '(–±–µ–∑ username)'} | ID: `{msg.from_user.id}`\n\n"
            f"üí¨ {msg.text}"
        )
        await bot.send_message(chat_id=FEEDBACK_RECEIVER_ID, text=text)
        await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞: {e}")
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    await state.clear()


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
