import asyncio
import json
import logging
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from .config import config

# ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO)

# ‚îÄ‚îÄ‚îÄ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
QUIZ_PATH = Path(__file__).parent / "data" / "quizzes.json"
try:
    with QUIZ_PATH.open(encoding="utf-8") as f:
        QUIZZES: dict[str, list[dict]] = json.load(f)
except FileNotFoundError:
    raise RuntimeError(f"–§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {QUIZ_PATH}")
except json.JSONDecodeError as e:
    raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ quizzes.json: {e}") from e

# ‚îÄ‚îÄ‚îÄ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(
    token=config.bot_token,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN),
)
dp = Dispatcher()

# ‚îÄ‚îÄ‚îÄ fsm-—Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class QuizState(StatesGroup):
    waiting_for_answer = State()

# ‚îÄ‚îÄ‚îÄ —Ö—ç–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def cmd_start(msg: Message) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é: –≤—ã–±–æ—Ä —Ç–µ–º—ã."""
    topics = list(QUIZZES.keys())
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=topic, callback_data=f"topic:{topic}")]
            for topic in topics
        ]
    )
    await msg.answer("*–ü—Ä–∏–≤–µ—Ç!*\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", reply_markup=kb)


@dp.callback_query(lambda cb: cb.data.startswith("topic:"))
async def choose_topic(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —â—ë–ª–∫–Ω—É–ª –ø–æ —Ç–µ–º–µ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."""
    topic = cb.data.split(":", 1)[1]
    await state.update_data(
        topic=topic,
        idx=0,
        score=0,
        results=[]            # ‚ûä —Å—é–¥–∞ –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
    )
    await ask_question(cb.message, state)

#@dp.message(lambda m: m.photo)
#async def echo_file_id(msg: Message):
    #file_id = msg.photo[-1].file_id
    #await msg.answer(file_id)      # –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º ID –≤ —á–∞—Ç
    # print(file_id)               # –º–æ–∂–Ω–æ –∏ –≤ –∫–æ–Ω—Å–æ–ª—å


async def ask_question(msg: Message, state: FSMContext) -> None:
    data   = await state.get_data()
    topic  = data["topic"]
    idx    = data["idx"]
    total  = len(QUIZZES[topic])
    q      = QUIZZES[topic][idx]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=opt, callback_data=f"ans:{i}")]
            for i, opt in enumerate(q["options"])
        ]
    )

    caption = (
        f"‚ùì_–í–æ–ø—Ä–æ—Å {idx + 1} –∏–∑ {total}_\n\n"
        f"*{q['question']}*"
    )

    # ‚îÄ‚îÄ –ù–û–í–û–ï: –µ—Å–ª–∏ –≤ JSON –µ—Å—Ç—å file_id, —à–ª—ë–º —Ñ–æ—Ç–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if q.get("file_id"):
        await msg.answer_photo(
            q["file_id"],           # —Ç–æ—Ç —Å–∞–º—ã–π AgACAgIAAxk‚Ä¶ –∏–∑ Telegram
            caption=caption,
            reply_markup=kb,
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        # —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å ‚Äî –≤–æ–ø—Ä–æ—Å –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await msg.answer(caption, reply_markup=kb)

    await state.set_state(QuizState.waiting_for_answer)



@dp.callback_query(QuizState.waiting_for_answer)
async def handle_answer(cb: CallbackQuery, state: FSMContext) -> None:
    data   = await state.get_data()
    topic  = data["topic"]
    idx    = data["idx"]
    q      = QUIZZES[topic][idx]
    chosen = int(cb.data.split(":", 1)[1])
    correct = chosen == q["correct"]

    # ‚ûã –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ results
    data["results"].append({"idx": idx, "correct": correct})
    # (–º–æ–∂–Ω–æ —Å—Ä–∞–∑—É state.update_data(results=data["results"]) ‚Äï –Ω–µ—Å–ª–æ–∂–Ω–æ)

    score = data["score"] + int(correct)
    next_idx = idx + 1

    await cb.answer("‚úÖ –í–µ—Ä–Ω–æ!" if correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")

    if next_idx < len(QUIZZES[topic]):
        await state.update_data(idx=next_idx, score=score, results=data["results"])
        await ask_question(cb.message, state)

    else:
        # ‚îÄ‚îÄ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥ + –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        lines = []
        for i, item in enumerate(data["results"], start=1):
            q_obj = QUIZZES[topic][item["idx"]]
            mark  = "‚úÖ" if item["correct"] else "‚ùå"
            right = q_obj["options"][q_obj["correct"]]
            lines.append(f"{mark} *–í–æ–ø—Ä–æ—Å {i}:* {q_obj['question']}\n‚ÄÉ*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* _{right}_")

        report = "\n\n".join(lines)

        await cb.message.answer(
            f"üèÅ –ö–æ–Ω–µ—Ü!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{score}* –∏–∑ *{len(data['results'])}*\n\n{report}"
        )
        await state.clear()

        # ‚ûï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        topics = list(QUIZZES.keys())
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=t, callback_data=f"topic:{t}")]
                for t in topics
            ]
        )
        await cb.message.answer(
            "üîÑ –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:",
            reply_markup=kb,
        )

# ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    if not config.bot_token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
