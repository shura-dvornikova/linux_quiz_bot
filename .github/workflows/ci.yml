# .github/workflows/ci.yml
name: CI-CD (local self-hosted)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

###############################################################################
# 1.  LINT + TEST  – идёт на GitHub-hosted runner
###############################################################################
jobs:

  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    # ── 1. checkout ──────────────────────────────────────────────────────────
    - name: Checkout code
      uses: actions/checkout@v4

    # ── 2. python ────────────────────────────────────────────────────────────
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    # ── 3. cache pip ─────────────────────────────────────────────────────────
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    # ── 4. install deps + линтеры ────────────────────────────────────────────
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest

    # ── 5. линтеры ───────────────────────────────────────────────────────────
    - name: Flake8
      run: flake8 --config .flake8 .

    - name: Black (check-only)
      run: black --check .

    # ── 6. unit-tests (если появятся) ────────────────────────────────────────
    - name: Run pytest (skip-ok)
      run: |
        pytest -q || echo "⚠️  no tests yet"

###############################################################################
# 2.  DOCKER BUILD + PUSH  – идёт на self-hosted runner
###############################################################################
  docker-build:
    if: github.event_name == 'push'         # не гоняем на PR
    needs: lint-and-test
    runs-on: [ self-hosted ]                # ваша машина

    outputs:                                # отдаём тег следующей job
      image_tag: ${{ steps.vars.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ── 1. login to Docker Hub ───────────────────────────────────────────────
    - name: Docker login
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # ── 2. формируем тег вида 20250731-1244 ──────────────────────────────────
    - name: Extract tag (YYYYMMDD-HHMM)
      id: vars
      run: echo "tag=$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"

    # ── 3. build + push ──────────────────────────────────────────────────────
    - name: Build & push
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: |
          docker.io/${{ secrets.DOCKERHUB_USER }}/linux-quiz-bot:${{ steps.vars.outputs.tag }}
          docker.io/${{ secrets.DOCKERHUB_USER }}/linux-quiz-bot:latest

###############################################################################
# 3.  LOCAL DEPLOY  – тот же self-hosted runner, после сборки
###############################################################################
  deploy-local:
    needs: docker-build
    runs-on: [ self-hosted ]                # тот же раннер / та же машина

    env:                                   # удобная переменная
      IMAGE_FULL: docker.io/${{ secrets.DOCKERHUB_USER }}/linux-quiz-bot:${{ needs.docker-build.outputs.image_tag }}

    steps:
    - name: Pull fresh image
      run: docker pull $IMAGE_FULL

    - name: Recreate container (docker-compose)
      run: |
        export IMAGE_TAG=${{ needs.docker-build.outputs.image_tag }}
        docker compose -f docker-compose.dev.yml \
                       --env-file .env.dev      \
                       up -d --force-recreate

    - name: Smoke test – ping Bot API
      run: |
        sleep 5     # ждём пока контейнер поднимется
        curl -sf "http://localhost:8080/healthz" || echo "🤷‍♂️ no health-check yet"

