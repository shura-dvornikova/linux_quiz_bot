name: CI-CD (local self-hosted)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest

    - name: Flake8
      run: flake8 --config .flake8 .

    - name: Black (check-only)
      run: black --check .

    - name: Run pytest (skip-ok)
      run: |
        pytest -q || echo "‚ö†Ô∏è  no tests yet"

  docker-build:
    if: github.event_name == 'push'
    needs: lint-and-test
    runs-on: [ self-hosted ]

    outputs:
      image_tag: ${{ steps.vars.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Docker login
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract tag (YYYYMMDD-HHMM)
      id: vars
      run: echo "tag=$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"

    - name: Build & push
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: |
          docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:${{ steps.vars.outputs.tag }}
          docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:latest

  deploy-local:
    needs: docker-build
    runs-on: [ self-hosted ]

    env:
      IMAGE_FULL: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:${{ needs.docker-build.outputs.image_tag }}

    steps:
    - name: Pull fresh image
      run: docker pull $IMAGE_FULL

    - name: Create .env.dev from secrets
      run: |
        cat <<EOF > .env.dev
        BOT_TOKEN_DEV=${{ secrets.BOT_TOKEN_DEV }}
        ENV=dev
        # –î–æ–±–∞–≤—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        EOF

    - name: Recreate container (docker-compose)
      run: |
        export IMAGE_TAG=${{ needs.docker-build.outputs.image_tag }}
        docker compose -f docker-compose.dev.yml \
                       --env-file .env.dev      \
                       up -d --force-recreate

    - name: Smoke test ‚Äì ping Bot API
      run: |
        sleep 5
        curl -sf "http://localhost:8080/healthz" || echo "ü§∑‚Äç‚ôÇÔ∏è no health-check yet"
