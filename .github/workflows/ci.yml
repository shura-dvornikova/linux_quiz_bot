name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LINT + TEST ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    - uses: actions/checkout@v4

    # 2. –°—Ç–∞–≤–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é Python
    - uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    # 3. –ö–µ—à pip-–ø–∞–∫–µ—Ç–æ–≤
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ + –ª–∏–Ω—Ç–µ—Ä—ã
    - name: Install deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest

    # 5. Flake8
    - name: Run Flake8
      run: flake8 --config .flake8 .

    # 6. Black (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    - name: Check formatting with Black
      run: black --check .

    # 7. Pytest (–∫–æ–¥ 5 ‚Üí –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤  ‚Üí —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º)
    - name: Run tests (tolerate no-tests)
      run: |
        set +e
        python -m pytest -q
        status=$?
        if [ "$status" = "5" ]; then
          echo "üõà  Pytest: no tests collected ‚Üí ok"
          exit 0
        fi
        exit $status

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DOCKER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  docker-build:
    if: github.event_name == 'push'           # —Ç–æ–ª—å–∫–æ push (–Ω–µ PR)
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    # –ª–æ–≥–∏–Ω –≤ Docker Hub
    - name: Docker login
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # —Ç–µ–≥ –¥–ª—è –æ–±—Ä–∞–∑–∞
    - name: Extract tag (YYYYMMDD-HHMM)
      id: tag
      run: echo "TAG=$(date +'%Y%m%d-%H%M')" >>"$GITHUB_OUTPUT"

    # —Å–±–æ—Ä–∫–∞ –∏ push
    - name: Build & push image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:${{ steps.tag.outputs.TAG }}
          docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:latest
