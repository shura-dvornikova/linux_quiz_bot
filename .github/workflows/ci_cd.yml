name: CI-CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:

  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black pytest

      - name: Flake8
        run: flake8 --config .flake8 .

      - name: Black (check-only)
        run: black --check .

      - name: Pytest (skip-ok)
        run: pytest -q || echo "no tests yet"

  docker-build:
    needs: lint-and-test
    if: github.event_name == 'push'
    runs-on: [ self-hosted ]

    outputs:
      image_tag: ${{ steps.vars.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract tag (YYYYMMDD-HHMM)
        id: vars
        run: echo "tag=$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"

      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:${{ steps.vars.outputs.tag }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:latest

  # ==================== DEV (develop) ====================
  deploy-dev:
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: [ self-hosted ]

    # эти переменные попадут внутрь docker-compose.dev.yml
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ needs.docker-build.outputs.image_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Pull fresh image
        run: docker pull docker.io/${DOCKERHUB_USERNAME}/linux-quiz-bot:${IMAGE_TAG}

      - name: Create .env.dev from secrets
        run: |
          cat > .env.dev <<EOF
          ENV=dev
          BOT_TOKEN_DEV=${{ secrets.BOT_TOKEN_DEV }}
          LOG_LEVEL=INFO
          EOF

      - name: Recreate container (dev)
        run: |
          docker compose -f docker-compose.dev.yml \
                         --env-file .env.dev \
                         -p dev \
                         up -d --force-recreate

      - name: Show resolved image (dev)
        run: docker compose -f docker-compose.dev.yml --env-file .env.dev config | grep -i 'image:'

      - name: Smoke test
        run: |
          sleep 5
          curl -sf http://localhost:8081/healthz || echo "no health-check"

  # ==================== PROD (main) ====================
  deploy-prod:
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: [ self-hosted ]

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ needs.docker-build.outputs.image_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Pull fresh image
        run: docker pull docker.io/${DOCKERHUB_USERNAME}/linux-quiz-bot:${IMAGE_TAG}

      - name: Create .env.prod from secrets
        run: |
          cat > .env.prod <<EOF
          ENV=prod
          BOT_TOKEN_PROD=${{ secrets.BOT_TOKEN_PROD }}
          LOG_LEVEL=INFO
          EOF

      - name: Recreate container (prod)
        run: |
          docker compose -f docker-compose.prod.yml \
                         --env-file .env.prod \
                         -p prod \
                         up -d --force-recreate

      - name: Show resolved image (prod)
        run: docker compose -f docker-compose.prod.yml --env-file .env.prod config | grep -i 'image:'

      - name: Smoke test
        run: |
          sleep 5
          curl -sf http://localhost:8080/healthz || echo "no health-check"
