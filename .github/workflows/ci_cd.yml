name: CI-CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black pytest

      - name: Flake8
        run: flake8 --config .flake8 .

      - name: Black (check-only)
        run: black --check .

      - name: Run pytest (skip-ok)
        run: |
          pytest -q || echo "‚ö†Ô∏è  no tests yet"

  docker-build:
    if: github.event_name == 'push'
    needs: lint-and-test
    runs-on: [ self-hosted ]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ deploy-* –¥–∂–æ–±–∞—Ö
    outputs:
      image_tag: ${{ steps.vars.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # –¢–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD-HHMM (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —É —Ç–µ–±—è)
      - name: Extract tag (YYYYMMDD-HHMM)
        id: vars
        run: echo "tag=$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"

      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:${{ steps.vars.outputs.tag }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:latest

  # --- DEV –¥–µ–ø–ª–æ–π (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ), –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
  deploy-dev:
    needs: docker-build
    runs-on: [ self-hosted ]

    env:
      IMAGE_FULL: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:${{ needs.docker-build.outputs.image_tag }}

    steps:
      - name: Pull fresh image
        run: docker pull $IMAGE_FULL

      - name: Create .env.dev from secrets
        run: |
          cat <<EOF > .env.dev
          ENV=dev
          BOT_TOKEN_DEV=${{ secrets.BOT_TOKEN_DEV }}
          LOG_LEVEL=INFO
          EOF

      - name: Recreate container (docker-compose)
        run: |
          export IMAGE_TAG=${{ needs.docker-build.outputs.image_tag }}
          docker compose -f docker-compose.dev.yml \
                         --env-file .env.dev      \
                         up -d --force-recreate

      - name: Smoke test ‚Äì ping Bot API
        run: |
          sleep 5
          curl -sf "http://localhost:8081/healthz" || echo "ü§∑‚Äç‚ôÇÔ∏è no health-check yet"
  # ‚Üë —Å–æ–≤–µ—Ç: —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ø—Ä–æ–¥–æ–º, –≤ dev –º–∞–ø–ø–∏—Ä—É–π 8081:8080 –≤ docker-compose.dev.yml

  # --- PROD –¥–µ–ø–ª–æ–π (–ù–û–í–´–ô job)
  deploy-prod:
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: [ self-hosted ]

    env:
      IMAGE_FULL: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/linux-quiz-bot:${{ needs.docker-build.outputs.image_tag }}

    steps:
      - name: Pull fresh image
        run: docker pull $IMAGE_FULL

      - name: Create .env.prod from secrets
        run: |
          cat <<EOF > .env.prod
          ENV=prod
          BOT_TOKEN_PROD=${{ secrets.BOT_TOKEN_PROD }}
          LOG_LEVEL=INFO
          EOF

      - name: Recreate container (docker-compose)
        run: |
          export IMAGE_TAG=${{ needs.docker-build.outputs.image_tag }}
          docker compose -f docker-compose.prod.yml \
                         --env-file .env.prod      \
                         up -d --force-recreate

      - name: Smoke test ‚Äì ping Bot API
        run: |
          sleep 5
          curl -sf "http://localhost:8080/healthz" || echo "ü§∑ no health-check yet"
